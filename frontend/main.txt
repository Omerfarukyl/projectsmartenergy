// Initialize charts and components
document.addEventListener('DOMContentLoaded', async () => {
  const data = await fetchChartData();
  if (!data) return;

  const tijd = data.map(d => d["Tijdstip"]);
  const spanning = data.map(d => parseFloat(d["Zonnepaneelspanning (V)"]));
  const stroom = data.map(d => parseFloat(d["Zonnepaneelstroom (A)"]));
  const buitenTemp = data.map(d => parseFloat(d["Buitentemperatuur (°C)"]));
  const binnenTemp = data.map(d => parseFloat(d["Binnentemperatuur (°C)"]));
  const luchtvochtigheid = data.map(d => parseFloat(d["Luchtvochtigheid (%)"]));
  const waterstof = data.map(d => parseFloat(d["Waterstofproductie (L/u)"]));
  const accu = data.map(d => parseFloat(d["Accuniveau (%)"]));
  const co2 = data.map(d => parseFloat(d["CO2-concentratie binnen (ppm)"]));

  // Eén lijn
  renderLineChart('spanningChart', 'Zonnepaneelspanning (V)', tijd, spanning, 'orange');
  renderLineChart('stroomChart', 'Zonnepaneelstroom (A)', tijd, stroom, 'green');
  renderLineChart('luchtChart', 'Luchtvochtigheid (%)', tijd, luchtvochtigheid, 'teal');
  renderLineChart('waterstofChart', 'Waterstofproductie (L/u)', tijd, waterstof, 'purple');
  renderLineChart('accuChart', 'Accuniveau (%)', tijd, accu, 'black');
  renderLineChart('co2Chart', 'CO₂-concentratie binnen (ppm)', tijd, co2, 'gray');

  // Meerdere lijnen
  renderMultiLineChart('tempChart', tijd, [
    { label: 'Buitentemperatuur', data: buitenTemp, borderColor: 'blue' },
    { label: 'Binnentemperatuur', data: binnenTemp, borderColor: 'red' }
  ]);

  // Initialize other components
  initializeNavigation();
  initializeUserProfile();
});

async function fetchChartData() {
  try {
    const response = await fetch('http://localhost:3000/data'); // Of '/data' als je via proxy werkt
    return await response.json();
  } catch (error) {
    console.error('Fout bij laden van data:', error);
    return null;
  }
}

function renderLineChart(id, label, labels, data, color) {
  const ctx = document.getElementById(id);
  if (!ctx) return;

  new Chart(ctx, {
    type: 'line',
    data: {
      labels,
      datasets: [{
        label,
        data,
        borderColor: color,
        backgroundColor: 'transparent',
        tension: 0.3
      }]
    },
    options: {
      responsive: true,
      scales: {
        y: { beginAtZero: false }
      }
    }
  });
}

function renderMultiLineChart(id, labels, datasets) {
  const ctx = document.getElementById(id);
  if (!ctx) return;

  new Chart(ctx, {
    type: 'line',
    data: {
      labels,
      datasets: datasets.map(ds => ({
        label: ds.label,
        data: ds.data,
        borderColor: ds.borderColor,
        backgroundColor: 'transparent',
        tension: 0.3
      }))
    },
    options: {
      responsive: true,
      scales: {
        y: { beginAtZero: false }
      }
    }
  });
}

// Navigation handling
function initializeNavigation() {
  const navLinks = document.querySelectorAll('[data-nav-link]');
  navLinks.forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const page = e.target.dataset.page;
      loadPage(page);
    });
  });
}

// User profile handling
function initializeUserProfile() {
  const profileButton = document.getElementById('profileButton');
  if (profileButton) {
    profileButton.addEventListener('click', () => {
      // Handle profile menu toggle
    });
  }
}

// Page loading
async function loadPage(page) {
  try {
    const response = await fetch(`/api/pages/${page}`);
    const content = await response.text();
    document.getElementById('main-content').innerHTML = content;
  } catch (error) {
    console.error('Error loading page:', error);
  }
}
